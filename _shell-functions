#!bin/bash
#functions compatible with bash/zsh
cpuload() {
    LINE=`ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' |sed -n '1h;$!H;$g;s/\n/ +/gp'`
    bc <<< $LINE
}
podsetnik() { sleep $1 && notify-send "$2" & }
score() { watch -n10 --no-title "w3m http://www.livescore.com/ |awk '/live [0-9H]+[^ ]/,/red cards/'" ; }

yt2mp3() { youtube-dl -c --restrict-filenames --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" $@ ;}
# send process to the background
background() { $1 $2 >/dev/null 2>&1 &! ;}
# quickly cd out of directories using numbers
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }
burniso() { cdrecord -v -eject "$1" ;}
mkiso() { dd if=$1 of=$2.iso ; }
clip() { cat $1 | xclip -selection clipboard; }
#mdless(){ pandoc -s -f markdown -t man "$*" | groff -T utf8 -man | less; }
dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}
dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}
#grep git history $1 = regexp
ggh() { git grep "$1" $(git rev-list --all) }
zman() { PAGER="less -g -s '+/^       "$1"'" man zshall }
#ft trazi tekst u bilo kom fajlu
ft() { find . -name "$2" -exec grep -il "$1" {} \; }

#tail sa highlightom
t() { tail -f $1 | perl -pe "s/$2/\e[1;31;43m$&\e[0m/g" }

function pdfpextr()
{
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

ranger-cd() {
       tempfile=$(mktemp)
       ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
       test -f "$tempfile" &&
       if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
         cd -- "$(cat "$tempfile")"
       fi
       rm -f -- "$tempfile"
     }

# This binds Ctrl-O to ranger-cd:
zle -N ranger-cd
bindkey '^o' ranger-cd

_seteq(){
  amixer -D equal -q set '00. 31 Hz' $1
  amixer -D equal -q set '01. 63 Hz' $2
  amixer -D equal -q set '02. 125 Hz' $3
  amixer -D equal -q set '03. 250 Hz' $4
  amixer -D equal -q set '04. 500 Hz' $5
  amixer -D equal -q set '05. 1 kHz' $6
  amixer -D equal -q set '06. 2 kHz' $7
  amixer -D equal -q set '07. 4 kHz' $8
  amixer -D equal -q set '08. 8 kHz' $9
  amixer -D equal -q set '09. 16 kHz' $10
}

seteq(){
  case $1 in
    speakers) _seteq 80 70 65 60 60 60 60 80 80 80;;
    notebook) _seteq 00 75 75 70 50 50 60 70 85 85;;
    headphones) _seteq 66 66 66 66 55 30 53 15 80 85;;
    hd201) _seteq 66 66 71 77 65 62 68 73 71 68;;
    *) _seteq 66 66 66 66 66 66 66 66 66 66;;
  esac
}
down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';}

valuta() {
#valuta shows the exchange rate for currencies.
# Example: "valuta 100 eur usd" shows the worth of 100 euro in dollars
  wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3" |  sed '/res/!d;s/<[^>]*>//g';
}
chgext() {
	for file in *.$1 ; do mv "$file" "${file%.$1}.$2" ; done
}

# clock : puts a clock in the right top corner of the terminal
clock() { while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &}
# shorten url
shorten() { curl -F"shorten=$*" https://0x0.st }
# Read pdfs with less.
vpdf() { pdftotext -layout "$1" - | less -r }
gi() { curl -L -s https://www.gitignore.io/api/$@ ;}
transfer() { basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile"|xclip -selection clipboard;xclip -selection clipboard ; }
