#!bin/bash
#functions compatible with bash/zsh
podsetnik()
{
    sleep $1 && notify-send "$2" &
}
noise() {
  case "$1" in
    "mute"|"unmute")
      amixer -q set Master "$1"
      ;;
    *"%")
      amixer -q set PCM "$1"
      ;;
  esac
}
alarm() {
  local n=$(date +"%s")
  local w=$(date -d "$1" +"%s")
  [ "$w" -gt "$n" ] || w=$(($w + 86400))

  noise mute
  sleep $(($w - $n))
  noise unmute

  for i in {10..42}; do
    noise ${i}%
    sleep 2
  done &

  mplayer -really-quiet '/home/tingol/Music/Monstercat\ 018\ -\ Frontier\ (2014)\ \[MC018\]/12.\ PIXL\ -\ Broken\ Bones\ (feat.\ Cassandra\ Kay).mp3'
}
# sanitize - set file/directory owner and permissions to normal values (644/755)
# usage: sanitize <file>
sanitize()
{
  chmod -R u=rwX,go=rX "$@"
  chown -R ${USER}:users "$@"
}
# usage: arhiviraj <filename | dirname>
function arhiviraj() { tar czf "${1%%/}.tar.gz" "${1%%/}/"; }

say() { if [[ "${1}" =~ -[a-z]{2} ]]; then local lang=${1#-}; local text="${*#$1}"; else local lang=${LANG%_*}; local text="$*";fi; mpv "http://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&q=${text}" &> /dev/null ; }
# send process to the background
background() { $1 $2 >/dev/null 2>&1 &! ;}
# quickly cd out of directories using numbers
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }
tophist() { history | awk '{ print $2 }' | sort |  uniq -c | sort -rn | sed '1,27!d' ;}
burniso() { cdrecord -v -eject "$1" ;}
mkiso() { dd if=$1 of=$2.iso ; }
clip() { cat $1 | xclip -selection clipboard; }
lsd () {
 # directory LS
 echo `els -l | grep "^d" | awk '{ print $9"  "$10 }' | tr -d "/"`
}
dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}
dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}
psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}
zman() {
      PAGER="less -g -s '+/^       "$1"'" man zshall
}
#ft trazi tekst u bilo kom fajlu
ft() {
     find . -name "$2" -exec grep -il "$1" {} \;
}
#tail sa highlightom
t() {
    tail -f $1 | perl -pe "s/$2/\e[1;31;43m$&\e[0m/g"
}
function pdfpextr()
{
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

ranger-cd() {
       tempfile=$(mktemp)
       ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
       test -f "$tempfile" &&
       if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
         cd -- "$(cat "$tempfile")"
       fi
       rm -f -- "$tempfile"
     }

# This binds Ctrl-O to ranger-cd:
zle -N ranger-cd
bindkey '^o' ranger-cd

_seteq(){
  amixer -D equal -q set '00. 31 Hz' $1
  amixer -D equal -q set '01. 63 Hz' $2
  amixer -D equal -q set '02. 125 Hz' $3
  amixer -D equal -q set '03. 250 Hz' $4
  amixer -D equal -q set '04. 500 Hz' $5
  amixer -D equal -q set '05. 1 kHz' $6
  amixer -D equal -q set '06. 2 kHz' $7
  amixer -D equal -q set '07. 4 kHz' $8
  amixer -D equal -q set '08. 8 kHz' $9
  amixer -D equal -q set '09. 16 kHz' $10
}

seteq(){
  case $1 in
    speakers) _seteq 80 70 65 60 60 60 60 80 80 80;;
    notebook) _seteq 00 75 75 70 50 50 60 70 85 85;;
    headphones) _seteq 66 66 66 66 55 30 53 15 80 85;;
    hd201) _seteq 66 66 71 77 65 62 68 73 71 68;;
    *) _seteq 66 66 66 66 66 66 66 66 66 66;;
  esac
}
