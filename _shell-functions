#!bin/bash
#functions compatible with bash/zsh
cpuload() {
    LINE=`ps -eo pcpu |grep -vE '^\s*(0.0|%CPU)' |sed -n '1h;$!H;$g;s/\n/ +/gp'`
    bc <<< $LINE
}
podsetnik() { sleep $1 && notify-send "$2" & }
score() { watch -n10 --no-title "w3m http://www.livescore.com/ |awk '/live [0-9H]+[^ ]/,/red cards/'" ; }

yt2mp3() { youtube-dl -c --restrict-filenames --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" $@ ;}
# sanitize - set file/directory owner and permissions to normal values (644/755)
# usage: sanitize <file>
sanitize()
{
  chmod -R u=rwX,go=rX "$@"
  chown -R ${USER}:users "$@"
}

say() { if [[ "${1}" =~ -[a-z]{2} ]]; then local lang=${1#-}; local text="${*#$1}"; else local lang=${LANG%_*}; local text="$*";fi; mpv "http://translate.google.com/translate_tts?ie=UTF-8&tl=${lang}&q=${text}" &> /dev/null ; }
# send process to the background
background() { $1 $2 >/dev/null 2>&1 &! ;}
# quickly cd out of directories using numbers
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }
calc () { echo "scale=3; $*" | bc }
burniso() { cdrecord -v -eject "$1" ;}
mkiso() { dd if=$1 of=$2.iso ; }
clip() { cat $1 | xclip -selection clipboard; }
lsd () {
 # directory LS
 echo `els -l | grep "^d" | awk '{ print $9"  "$10 }' | tr -d "/"`
}
dgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    grep -iR "$@" * | grep -v "Binary"
}
dfgrep() {
    # A recursive, case-insensitive grep that excludes binary files
    # and returns only unique filenames
    grep -iR "$@" * | grep -v "Binary" | sed 's/:/ /g' | awk '{ print $1 }' | sort | uniq
}
psgrep() {
    if [ ! -z $1 ] ; then
        echo "Grepping for processes matching $1..."
        ps aux | grep $1 | grep -v grep
    else
        echo "!! Need name to grep for"
    fi
}
zman() { PAGER="less -g -s '+/^       "$1"'" man zshall }
#ft trazi tekst u bilo kom fajlu
ft() { find . -name "$2" -exec grep -il "$1" {} \; }

#tail sa highlightom
t() { tail -f $1 | perl -pe "s/$2/\e[1;31;43m$&\e[0m/g" }

function pdfpextr()
{
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=${1} \
       -dLastPage=${2} \
       -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
       ${3}
}

ranger-cd() {
       tempfile=$(mktemp)
       ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
       test -f "$tempfile" &&
       if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
         cd -- "$(cat "$tempfile")"
       fi
       rm -f -- "$tempfile"
     }

# This binds Ctrl-O to ranger-cd:
zle -N ranger-cd
bindkey '^o' ranger-cd

_seteq(){
  amixer -D equal -q set '00. 31 Hz' $1
  amixer -D equal -q set '01. 63 Hz' $2
  amixer -D equal -q set '02. 125 Hz' $3
  amixer -D equal -q set '03. 250 Hz' $4
  amixer -D equal -q set '04. 500 Hz' $5
  amixer -D equal -q set '05. 1 kHz' $6
  amixer -D equal -q set '06. 2 kHz' $7
  amixer -D equal -q set '07. 4 kHz' $8
  amixer -D equal -q set '08. 8 kHz' $9
  amixer -D equal -q set '09. 16 kHz' $10
}

seteq(){
  case $1 in
    speakers) _seteq 80 70 65 60 60 60 60 80 80 80;;
    notebook) _seteq 00 75 75 70 50 50 60 70 85 85;;
    headphones) _seteq 66 66 66 66 55 30 53 15 80 85;;
    hd201) _seteq 66 66 71 77 65 62 68 73 71 68;;
    *) _seteq 66 66 66 66 66 66 66 66 66 66;;
  esac
}
down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';}
valuta() {
  wget -qO- "http://www.google.com/finance/converter?a=$1&from=$2&to=$3" |  sed '/res/!d;s/<[^>]*>//g';
}
# fshow - git commit browser (enter for show, ctrl-d for diff, ` toggles sort)
fshow() {
  local out shas sha q k
  while out=$(
      git log --graph --color=always \
          --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
      fzf --ansi --multi --no-sort --reverse --query="$q" \
          --print-query --expect=ctrl-d --toggle-sort=\`); do
    q=$(head -1 <<< "$out")
    k=$(head -2 <<< "$out" | tail -1)
    shas=$(sed '1,2d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
    [ -z "$shas" ] && continue
    if [ "$k" = ctrl-d ]; then
      git diff --color=always $shas | less -R
    else
      for sha in $shas; do
        git show --color=always $sha | less -R
      done
    fi
  done
}

jj() {
    local dir
    dir=$(fasd -Rdl |\
        sed "s:$HOME:~:" |\
        fzf --no-sort +m -q "$*" |\
        sed "s:~:$HOME:")\
    && pushd "$dir"
}
usage() {
    du -h --max-depth="${2:-1}"\
      "${1:-.}" |\
        sort -h |\
        sed "s:\./::" |\
        sed "s:$HOME:~:"
}
